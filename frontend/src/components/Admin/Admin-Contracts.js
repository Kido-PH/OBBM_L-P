import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Box,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TablePagination,
  IconButton,
} from "@mui/material";
import axios from "axios";
import InfoIcon from "@mui/icons-material/Info";
import html2pdf from "html2pdf.js";
import EditIcon from "@mui/icons-material/Edit";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import CancelIcon from "@mui/icons-material/Cancel";
import ErrorOutlineIcon from "@mui/icons-material/ErrorOutline";
import { toast } from "react-toastify";
import {} from "date-fns";
import ReactPaginate from "react-paginate";
import contractApi from "../../api/contractApi";

const ManageContracts = () => {
  const [contracts, setContracts] = useState([]); // D·ªØ li·ªáu h·ª£p ƒë·ªìng
  const [showModal, setShowModal] = useState(false); // Hi·ªÉn th·ªã modal
  const [filterPaymentStatus, setFilterPaymentStatus] = useState(""); // Tr·∫°ng th√°i l·ªçc PaymentStatus
  const [filterContractType, setFilterContractType] = useState(""); // Tr·∫°ng th√°i l·ªçc ContractType
  const [searchTerm, setSearchTerm] = useState(""); // Tr·∫°ng th√°i t√¨m ki·∫øm
  const [showModalPDF, setShowModalPDF] = useState(false);
  const [selecterContract, setSelecterContract] = useState();
  const [confirmCancel, setConfirmCancel] = useState(false);
  const [cancelContractId, setCancelContractId] = useState(null); // L∆∞u ID h·ª£p ƒë·ªìng c·∫ßn h·ªßy
  const [page, setPage] = useState(1);
  const SIZE_CONTRACT = 5;
  const [pageCount, setPageCount] = useState(0);

  useEffect(() => {
    const token = "eyJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJraWRvLmNvbSIsInN1YiI6ImFkbWluIiwiZXhwIjoxNzMwNDY1ODU5LCJpYXQiOjE3MzA0NjQwNTksImp0aSI6IjQwZTQxNzIyLTZlY2MtNDg3Ni04MGE5LWU4ODM5NGM5MzlhYiIsInNjb3BlIjoiUk9MRV9BRE1JTiJ9.COtk4hFVa6RfsHFYLkuoJOoI9DawW7CqxNpuPWswzvBbfdgaMzgGh2WHQ27xIXVAdBN9KS1H8AqAkMFwcNgXnA";
    sessionStorage.setItem("token", token);

    fetchContractWithPaginate(page);
  }, []);


  // H√†m l·∫•y t·∫•t c·∫£ listContract
  const fetchContractWithPaginate = async (page) => {
    try {
      const res = await contractApi.getPaginate(page, SIZE_CONTRACT);
      setContracts(res.result.content);
      setPageCount(res.result.totalPages);
      console.log("res.dt = ", res.result.content);
    } catch (error) {
      console.error("Kh√¥ng t√¨m n·∫°p ƒë∆∞·ª£c danh m·ª•c: ", error);
    }
  };

  // H√†m x·ª≠ l√Ω ph√¢n trang
  const handlePageClick = (event) => {
    fetchContractWithPaginate(+event.selected + 1);
    console.log(`User requested page number ${event.selected}`);
  };

  // Hi·ªÉn th·ªã modal ch·ªânh s·ª≠a
  const handleShowModal = (contract) => {
    // setFormData(contract);
    setShowModal(true);
  };
  const handleModalPDF = (contract) => {
    console.log(contract);
    setSelecterContract(contract);
    setShowModalPDF(true);
  };

  // ƒê√≥ng modal
  const handleCloseModal = () => {
    setShowModal(false);
    setShowModalPDF(false);
  };

  // Thay ƒë·ªïi d·ªØ li·ªáu trong form
  // const handleChange = (e) => {
  //   const { name, value } = e.target;
  //   setFormData({ ...formData, [name]: value });
  // };

  // L∆∞u h·ª£p ƒë·ªìng sau khi ch·ªânh s·ª≠a
  // const handleSave = () => {
  //   setContracts(
  //     contracts.map((contract) =>
  //       contract.ContractId === formData.ContractId ? formData : contract
  //     )
  //   );
  //   console.log("Edit contracts sucessfull!");
  //   toast.success("Edit contract successful !");
  //   setShowModal(false); // ƒê√≥ng modal sau khi l∆∞u
  // };

  // const handleCancelConfirmation = (ContractId) => {
  //   setCancelContractId(ContractId); // L∆∞u l·∫°i ID c·ªßa h·ª£p ƒë·ªìng c·∫ßn h·ªßy
  //   setConfirmCancel(true); // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n
  // };

  // H·ªßy h·ª£p ƒë·ªìng b·∫±ng c√°ch c·∫≠p nh·∫≠t tr·∫°ng th√°i
  const handleCancel = () => {
    setContracts(
      contracts.map((contract) =>
        contract.ContractId === cancelContractId
          ? { ...contract, ContractStatus: "Cancelled" }
          : contract
      )
    );
    setConfirmCancel(false); // ƒê√≥ng h·ªôp tho·∫°i x√°c nh·∫≠n
    toast.success("The contract has been canceled");
  };
  const handleConfirm = (ContractId) => {
    setContracts(
      contracts.map((contract) =>
        contract.ContractId === ContractId
          ? { ...contract, IsConfirmed: true, ContractStatus: "Completed" }
          : contract
      )
    );
    toast.success("The contract has been confirmed");
  };
  const handleChangePage = (event, newPage) => {
    // setPage(newPage);
  };

  const handleSavePDF = () => {
    const contractContent = document.getElementById("contract-content");
    html2pdf().from(contractContent).save();
  };
  const handleSendMail = () => {
    // L·∫•y ƒë·ªãa ch·ªâ email c·ªßa kh√°ch h√†ng
    // selecterContract l·∫•y t√™n ƒë·∫°i di·ªán h·ª£p ƒë·ªìng m√† m√¨nh ch·ªçn
    const emailTo = selecterContract.CustomerEmail;

    // L·∫•y n·ªôi dung HTML c·ªßa h·ª£p ƒë·ªìng
    const contractHtml = document.getElementById("contract-content").innerHTML;

    // apiUrl ch·ª©a ƒë·ªãa ch·ªâ API g·ª≠i request POST ƒë·∫øn ƒë·ªÉ g·ª≠i email
    const apiUrl = "http://emailserivce.somee.com/Email/sendMail";

    // Create the data object
    const data = {
      // ƒê·ªãa ch·ªâ email c·ªßa KH l·∫•y ·ªü tr√™n
      emailTo: emailTo,
      // Content HTML c·ªßa Hƒê (d√πng l√†m content email)
      template: contractHtml,
    };

    // Send the POST request to the API
    // axios.post(apiUrl, data) G·ª≠i y/c POST ƒë·∫øn apiUrl v·ªõi d·ªØ li·ªáu data
    // N·∫øu th√†nh c√¥ng th√¨ h√†m trong then th·ª±c thi
    axios
      .post(apiUrl, data)
      .then((response) => {
        console.log("Email sent successfully:", response.data);
        alert("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
      })
      .catch((error) => {
        console.error("Error sending email:", error);
        alert("G·ª≠i email th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
      });
  };

  return (
    <div>
      {/* T√¨m ki·∫øm v√† l·ªçc */}
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          mb: 2, // margin bottom
        }}
      >
        {/* √î t√¨m ki·∫øm */}
        <div className="admin-group">
          <svg
            className="admin-icon-search"
            aria-hidden="true"
            viewBox="0 0 24 24"
          >
            <g>
              <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
            </g>
          </svg>
          <input
            placeholder="Search"
            type="search"
            className="admin-input-search"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        {/* B·ªô l·ªçc theo PaymentStatus */}
        <FormControl
          sx={{
            width: "200px",
            maxHeight: "30px",
          }}
        >
          <InputLabel sx={{ color: "#555" }}>Payment Status</InputLabel>
          <Select
            value={filterPaymentStatus}
            onChange={(e) => setFilterPaymentStatus(e.target.value)}
            label="Payment Status"
            sx={{
              "& .MuiSelect-select": {
                display: "flex",
                alignItems: "center",
              },
            }}
          >
            <MenuItem value="">
              <span role="img" aria-label="All">
                üîÑ
              </span>
              &nbsp; All
            </MenuItem>
            <MenuItem value="Paid">
              <span role="img" aria-label="Paid">
                üí∏
              </span>
              &nbsp; Paid
            </MenuItem>
            <MenuItem value="Pending">
              <span role="img" aria-label="Pending">
                ‚è≥
              </span>
              &nbsp; Pending
            </MenuItem>
            <MenuItem value="Unpaid">
              <span role="img" aria-label="Unpaid">
                üö´
              </span>
              &nbsp; Unpaid
            </MenuItem>
          </Select>
        </FormControl>

        {/* B·ªô l·ªçc theo ContractType */}
        <FormControl sx={{ width: "200px" }}>
          <InputLabel>Contract Type</InputLabel>
          <Select
            value={filterContractType}
            onChange={(e) => setFilterContractType(e.target.value)}
            label="Contract Type"
          >
            <MenuItem value="">All</MenuItem>
            <MenuItem value="Service">Service</MenuItem>
            <MenuItem value="Rental">Rental</MenuItem>
            <MenuItem value="Consulting">Consulting</MenuItem>
          </Select>
        </FormControl>
      </Box>
      <TableContainer component={Paper} className="table-container">
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>STT</TableCell>
              <TableCell>T√™n h·ª£p ƒë·ªìng</TableCell>
              <TableCell>Lo·∫°i ti·ªác</TableCell>
              <TableCell>S·ªë l∆∞·ª£ng kh√°ch</TableCell>
              <TableCell>S·ªë b√†n</TableCell>
              <TableCell>T·ªïng chi ph√≠</TableCell>
              <TableCell>Tr·∫°ng th√°i h·ª£p ƒë·ªìng</TableCell>
              <TableCell>Tr·∫°ng th√°i thanh to√°n</TableCell>
              <TableCell>Ng√†y t·ªï ch·ª©c</TableCell>
              <TableCell>M√¥ t·∫£</TableCell>
              <TableCell>T√™n kh√°ch h√†ng</TableCell>
              <TableCell>S·ªë ƒëi·ªán tho·∫°i</TableCell>
              <TableCell>Email</TableCell>
              <TableCell>H√†nh ƒë·ªông</TableCell>
            </TableRow>
          </TableHead>
          {/* N·ªôi dung contracts */}
          <TableBody>
            {contracts.map((contract, index) => (
                <TableRow key={contract.contractId}>
                  <TableCell>{index + 1}</TableCell>
                  <TableCell>{contract.name}</TableCell>
                  <TableCell>{contract.type}</TableCell>
                  <TableCell>{contract.guest}</TableCell>
                  <TableCell>{contract.table}</TableCell>
                  <TableCell>{new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND'}).format(contract.totalcost)}</TableCell>
                  <TableCell>{contract.status}</TableCell>
                  <TableCell>{contract.paymentstatus}</TableCell>
                  <TableCell>
                    {new Date(contract.organizdate).toLocaleDateString(
                      "vi-VN",
                      {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric",
                      }
                    )}{" "}
                  </TableCell>
                  <TableCell>{contract.description}</TableCell>
                  <TableCell>{contract.custname}</TableCell>
                  <TableCell>{contract.custphone}</TableCell>
                  <TableCell>{contract.custmail}</TableCell>
                  <TableCell
                    sx={{ display: "flex", gap: 1, flexWrap: "nowrap" }}
                  >
                    <IconButton
                      color="primary"
                      onClick={() => handleShowModal(contract)}
                      sx={{ justifyContent: "center" }}
                    >
                      <EditIcon />
                    </IconButton>

                    <IconButton
                      color="success"
                      onClick={() => handleConfirm(contract.ContractId)}
                      sx={{ justifyContent: "center" }}
                      disabled={
                        contract.ContractStatus === "Pending" ||
                        contract.ContractStatus === "Completed" ||
                        contract.PaymentStatus === "Pending"
                      }
                    >
                      <CheckCircleIcon />
                    </IconButton>

                    <IconButton
                      color="error"
                      // onClick={() =>
                      //   handleCancelConfirmation(contract.ContractId)
                      // }
                      sx={{ justifyContent: "center" }}
                      disabled={
                        contract.ContractStatus === "Pending" ||
                        contract.PaymentStatus === "Pending"
                      }
                    >
                      <CancelIcon />
                    </IconButton>

                    {/* New Info IconButton */}
                    <IconButton
                      color="info"
                      onClick={() => handleModalPDF(contract)}
                      sx={{ justifyContent: "center" }}
                    >
                      <InfoIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}
          </TableBody>
        </Table>

        {/* Ph√¢n trang */}
        <ReactPaginate
          nextLabel="next >"
          onPageChange={handlePageClick}
          pageRangeDisplayed={3}
          marginPagesDisplayed={2}
          pageCount={pageCount}
          previousLabel="< previous"
          pageClassName="page-item"
          pageLinkClassName="page-link"
          previousClassName="page-item"
          previousLinkClassName="page-link"
          nextClassName="page-item"
          nextLinkClassName="page-link"
          breakLabel="..."
          breakClassName="page-item"
          breakLinkClassName="page-link"
          containerClassName="pagination"
          activeClassName="active"
          renderOnZeroPageCount={null}
        />

      </TableContainer>
      {/* Modal ch·ªânh s·ª≠a h·ª£p ƒë·ªìng */}
      <Dialog open={showModal} onClose={handleCloseModal}>
        <DialogTitle
          sx={{ fontSize: "1.6rem", color: "#FFA500", fontWeight: "bold" }}
        >
          Edit Contract
        </DialogTitle>
        <DialogContent className="custom-input">
          <TextField
            label="Username"
            name="Username"
            // value={formData.Username}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <TextField
            label="EventId"
            name="EventId"
            type="number"
            // value={formData.EventId}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <TextField
            label="OrganizDate"
            name="OrganizDate"
            type="datetime-local"
            // value={formData.OrganizDate}
            // onChange={handleChange}
            fullWidth
            margin="dense"
            InputLabelProps={{ shrink: true }}
          />
          <TextField
            label="LocationId"
            name="LocationId"
            // value={formData.LocationId}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <TextField
            label="ContractType"
            name="ContractType"
            // value={formData.ContractType}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <TextField
            label="TotalMoney"
            name="TotalMoney"
            type="number"
            // value={formData.TotalMoney}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <TextField
            label="PaymentStatus"
            name="PaymentStatus"
            // value={formData.PaymentStatus}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <FormControl fullWidth margin="dense">
            <InputLabel>Contract Status</InputLabel>
            <Select
              label="Contract Status"
              name="ContractStatus"
              // value={formData.ContractStatus}
              // onChange={handleChange}
            >
              <MenuItem value="Active">Active</MenuItem>
              <MenuItem value="Pending">Pending</MenuItem>
              <MenuItem value="Completed">Completed</MenuItem>
              <MenuItem value="Cancelled">Cancelled</MenuItem>
            </Select>
          </FormControl>

          <TextField
            label="Description"
            name="Description"
            // value={formData.Description}
            // onChange={handleChange}
            multiline
            rows={3}
            fullWidth
            margin="dense"
          />
          <TextField
            label="CustomerName"
            name="CustomerName"
            // value={formData.CustomerName}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <TextField
            label="CustomerPhone"
            name="CustomerPhone"
            // value={formData.CustomerPhone}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
          <TextField
            label="CustomerEmail"
            name="CustomerEmail"
            type="email"
            // value={formData.CustomerEmail}
            // onChange={handleChange}
            fullWidth
            margin="dense"
          />
        </DialogContent>
        <DialogActions>
          <Button
            onClick={handleCloseModal}
            color="secondary"
            sx={{ fontSize: "1.3rem", fontWeight: "bold" }}
          >
            Close
          </Button>
          <Button
            // onClick={handleSave}
            color="primary"
            sx={{ fontSize: "1.3rem", fontWeight: "bold" }}
          >
            Save Changes
          </Button>
        </DialogActions>
      </Dialog>{" "}
      {/* Modal x√°c nh·∫≠n h·ªßy h·ªôp ƒë·ªìng */}
      <Dialog open={confirmCancel} onClose={() => setConfirmCancel(false)}>
        <DialogTitle
          sx={{
            fontSize: "1.6rem",
            color: "#d32f2f",
            display: "flex",
            alignItems: "center",
          }}
        >
          <ErrorOutlineIcon sx={{ color: "error.main", mr: 1 }} />
          Cancel Contract
        </DialogTitle>
        <DialogContent>
          <Typography sx={{ fontSize: "1.6rem" }}>
            Are you sure you want to cancel this contract?
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button
            onClick={() => setConfirmCancel(false)}
            color="secondary"
            sx={{ fontSize: "1.5rem" }}
          >
            Close
          </Button>
          <Button
            onClick={handleCancel}
            color="primary"
            sx={{ fontSize: "1.5rem" }}
          >
            Submit
          </Button>
        </DialogActions>
      </Dialog>
      <Dialog open={showModalPDF} onClose={handleCloseModal}>
        <DialogTitle
          sx={{ fontSize: "1.6rem", color: "#FFA500", fontWeight: "bold" }}
        >
          H·ª£p ƒê·ªìng D·ªãch V·ª•
        </DialogTitle>
        <DialogContent className="custom-input">
          <div
            id="contract-content"
            style={{
              padding: "20px",
              fontFamily: "Arial, sans-serif",
              lineHeight: 1.6,
            }}
          >
            <h2 style={{ textAlign: "center", textTransform: "uppercase" }}>
              C·ªông H√≤a X√£ H·ªôi Ch·ªß Nghƒ©a Vi·ªát Nam
            </h2>
            <p style={{ textAlign: "center", fontWeight: "bold" }}>
              ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c
            </p>
            <h3 style={{ textAlign: "center", marginTop: "20px" }}>
              H·ª£p ƒê·ªìng D·ªãch V·ª•
            </h3>

            <p style={{ textAlign: "right" }}>
              S·ªë h·ª£p ƒë·ªìng: <strong>{selecterContract?.EventId || "..."}</strong>
            </p>

            <p style={{ marginTop: "20px" }}>
              CƒÉn c·ª© B·ªô lu·∫≠t D√¢n s·ª± 2015 s·ªë 91/2015/QH13 v√† c√°c vƒÉn b·∫£n h∆∞·ªõng
              d·∫´n thi h√†nh;
            </p>
            <p>
              CƒÉn c·ª© nhu c·∫ßu v√† th·ªèa thu·∫≠n gi·ªØa c√°c b√™n, h√¥m nay, v√†o ng√†y{" "}
              <strong>
                {selecterContract?.OrganizDate
                  ? new Date(selecterContract.OrganizDate).getDate()
                  : "..."}
              </strong>{" "}
              th√°ng{" "}
              <strong>
                {selecterContract?.OrganizDate
                  ? new Date(selecterContract.OrganizDate).getMonth() + 1
                  : "..."}
              </strong>{" "}
              nƒÉm{" "}
              <strong>
                {selecterContract?.OrganizDate
                  ? new Date(selecterContract.OrganizDate).getFullYear()
                  : "..."}
              </strong>
              , t·∫°i tr·ª• s·ªü C√¥ng ty ...
            </p>

            <h3>
              B√™n A:{" "}
              <strong>{selecterContract?.Username || "(B√™n Thu√™)"}</strong>
            </h3>
            <p>
              <strong>ƒê·ªãa ch·ªâ tr·ª• s·ªü:</strong>{" "}
              {selecterContract?.Address || "ƒê·ªãa ch·ªâ c·ªßa b√™n A"}
            </p>
            <p>
              <strong>M√£ s·ªë thu·∫ø:</strong> {selecterContract?.TaxCode || "..."}
            </p>
            <p>
              <strong>ƒê·∫°i di·ªán l√† √îng/B√†:</strong>{" "}
              {selecterContract?.Username || "..."}
            </p>
            <p>
              <strong>Ch·ª©c v·ª•:</strong> {selecterContract?.Position || "..."}
            </p>
            <p>
              <strong>S·ªë ƒëi·ªán tho·∫°i:</strong>{" "}
              {selecterContract?.custphone || "0123456789"}
            </p>
            <p>
              <strong>Email:</strong>{" "}
              {selecterContract?.custmail || "example@example.com"}
            </p>
            <p>
              <strong>S·ªë t√†i kho·∫£n ng√¢n h√†ng:</strong>{" "}
              {selecterContract?.BankAccount || "123456789"} t·∫°i Ng√¢n h√†ng:{" "}
              {selecterContract?.BankName || "ABC"}
            </p>

            <h3>
              B√™n B: <strong>Freelancer (B√™n Cung C·∫•p D·ªãch V·ª•)</strong>
            </h3>
            <p>
              <strong>S·ªë CMND/CCCD:</strong>{" "}
              {selecterContract?.IDCard || "123456789"}, c·∫•p ng√†y ... t·∫°i ...
            </p>
            <p>
              <strong>Sinh ng√†y:</strong>{" "}
              {selecterContract?.Birthday || "01/01/1990"}
            </p>
            <p>
              <strong>ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫:</strong>{" "}
              {selecterContract?.Address || "ƒê·ªãa ch·ªâ c·ªßa b√™n B"}
            </p>
            <p>
              <strong>ƒê·ªãa ch·ªâ li√™n h·ªá:</strong>{" "}
              {selecterContract?.ContactAddress || "..."}
            </p>

            <h3>ƒêi·ªÅu 1: N·ªôi dung h·ª£p ƒë·ªìng</h3>
            <p>
              B√™n A ƒë·ªìng √Ω thu√™ B√™n B cung c·∫•p d·ªãch v·ª•{" "}
              {selecterContract?.ContractType || "d·ªãch v·ª•"} t·∫°i ƒë·ªãa ƒëi·ªÉm s·ªë{" "}
              <strong>{selecterContract?.LocationId || "..."}</strong> v√†o ng√†y{" "}
              <strong>
                {selecterContract?.OrganizDate
                  ? new Date(selecterContract.OrganizDate).toLocaleDateString()
                  : "..."}
              </strong>
              .
            </p>
            <p>D·ªãch v·ª• bao g·ªìm: {selecterContract?.Description || "..."}</p>

            <h3>ƒêi·ªÅu 2: Tr√°ch nhi·ªám v√† quy·ªÅn l·ª£i c·ªßa c√°c b√™n</h3>
            <p>
              - B√™n A c√≥ tr√°ch nhi·ªám thanh to√°n ƒë·∫ßy ƒë·ªß cho B√™n B theo t·ªïng s·ªë
              ti·ªÅn ƒë√£ tho·∫£ thu·∫≠n l√†{" "}
              <strong>{selecterContract?.TotalMoney || "..."}</strong>, v√† s·ªë
              ti·ªÅn ƒë√£ ƒë∆∞·ª£c thanh to√°n.
            </p>
            <p>
              - B√™n B c√≥ tr√°ch nhi·ªám cung c·∫•p d·ªãch v·ª• theo y√™u c·∫ßu c·ªßa B√™n A.
              N·∫øu c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ ph√°t sinh n√†o, c√°c b√™n s·∫Ω th∆∞∆°ng l∆∞·ª£ng ƒë·ªÉ t√¨m
              c√°ch gi·∫£i quy·∫øt.
            </p>

            <h3>ƒêi·ªÅu 3: ƒêi·ªÅu kho·∫£n chung</h3>
            <p>
              H·ª£p ƒë·ªìng c√≥ hi·ªáu l·ª±c k·ªÉ t·ª´ ng√†y k√Ω v√† s·∫Ω k·∫øt th√∫c sau khi d·ªãch v·ª•
              ho√†n th√†nh.
            </p>
            <p>
              C√°c tranh ch·∫•p ph√°t sinh s·∫Ω ƒë∆∞·ª£c gi·∫£i quy·∫øt theo ph√°p lu·∫≠t Vi·ªát
              Nam.
            </p>

            <h3>Ch·ªØ k√Ω c·ªßa c√°c b√™n</h3>
            <p>
              <strong>B√™n A:</strong> ___________________
            </p>
            <p>
              <strong>B√™n B:</strong> ___________________
            </p>
          </div>
        </DialogContent>

        <DialogActions>
          <Button
            onClick={handleCloseModal}
            color="secondary"
            sx={{ fontSize: "1.3rem", fontWeight: "bold" }}
          >
            ƒê√≥ng
          </Button>
          <Button
            onClick={handleSavePDF}
            color="primary"
            sx={{ fontSize: "1.3rem", fontWeight: "bold" }}
          >
            Xu·∫•t PDF
          </Button>
          <Button
            onClick={handleSendMail}
            color="success"
            sx={{ fontSize: "1.3rem", fontWeight: "bold" }}
          >
            G·ª≠i Email
          </Button>
        </DialogActions>
      </Dialog>{" "}
    </div>
  );
};

export default ManageContracts;